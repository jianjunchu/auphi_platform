/******************************************************************************* * * Auphi Data Integration PlatformKettle Platform * Copyright C 2011-2017 by Auphi BI : http://www.doetl.com  * Support：support@pentahochina.com * ******************************************************************************* * * Licensed under the LGPL License, Version 3.0 the "License"; * you may not use this file except in compliance with * the License. You may obtain a copy of the License at * *    https://opensource.org/licenses/LGPL-3.0  * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * ******************************************************************************/package com.auphi.ktrl.mdm.controller;import com.auphi.data.hub.core.BaseMultiActionController;import com.auphi.data.hub.core.PaginationSupport;import com.auphi.data.hub.core.struct.BaseDto;import com.auphi.data.hub.core.struct.Dto;import com.auphi.data.hub.core.util.JsonHelper;import com.auphi.data.hub.domain.Datasource;import com.auphi.data.hub.rest.WebserviceTaskRun;import com.auphi.data.hub.service.DatasourceService;import com.auphi.ktrl.mdm.domain.*;import com.auphi.ktrl.mdm.service.*;import com.auphi.ktrl.schedule.util.MarketUtil;import org.pentaho.di.core.Result;import org.pentaho.di.core.RowMetaAndData;import org.pentaho.di.core.database.Database;import org.pentaho.di.core.exception.KettleDatabaseException;import org.pentaho.di.core.row.RowMeta;import org.pentaho.di.core.row.RowMetaInterface;import org.pentaho.di.core.row.ValueMeta;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.servlet.ModelAndView;import springfox.documentation.annotations.ApiIgnore;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/**    * This class is used for ...    * @author Tony  * @version    *       1.0, 2016-1-28 下午8:55:03    */@ApiIgnore@Controller("mdmDataClean")public class MdmDataCleanController extends BaseMultiActionController{		private Map<Integer,Datasource> dataSourceMap = new HashMap<Integer,Datasource>();		private Map<Integer,DataBaseType> dataBaseTypeMap = new HashMap<Integer,DataBaseType>();		@Autowired	private DatasourceService datasourceService;		@Autowired	private MdmModelService mdmModelService;		@Autowired	private MdmTableService mdmTableService;		@Autowired	private MdmModelAttributeService mdmModelAttributeService;		@Autowired	private MdmDataCleanService mdmDataCleanService;		@Autowired	private DataBaseTypeService dataBaseTypeService;			private final static String INDEX = "admin/mdmDataClean";		public ModelAndView index(HttpServletRequest req,HttpServletResponse resp){		return new ModelAndView(INDEX);	}				public ModelAndView save(HttpServletRequest req,HttpServletResponse resp,MdmDataClean mdmDataClean) throws IOException{			Database database = null;		try{			MdmMapingTable mapingTable = (MdmMapingTable) req.getSession().getAttribute(SESSION_MAPINGTABLE);			if(mapingTable ==null){				this.setFailTipMsg("请先进行映射操作!", resp);				return null;			}			database = MarketUtil.getDatabase(mdmDataClean.getMaping_id_database());			database.connect();			if(createOrUpdateMapingTable(req,resp,database,mdmDataClean)){				List<MdmMapingResult> list = mapingTable.getSuccesses();				String tableName = mdmDataClean.getMaping_table_name();				if(mdmDataClean.getMaping_schema_name()!=null && !"".equals(mdmDataClean.getMaping_schema_name())){					tableName = mdmDataClean.getMaping_schema_name()+"."+tableName;				}								insertMapingTable(tableName,list,database);				req.getSession().setAttribute(SESSION_MAPINGTABLE, null);				Integer id = this.mdmDataCleanService.queryMaxId(null);		        if(id == null) id = 1;		        else id = id+1;		        mdmDataClean.setId(id);				this.mdmDataCleanService.save(mdmDataClean);				this.setOkTipMsg("添加成功", resp);			}		} catch(Exception e){			e.printStackTrace();			this.setFailTipMsg("添加失败", resp);		}finally{			if(database!=null){				database.disconnect();			}		}		return null;	}				private boolean createOrUpdateMapingTable(HttpServletRequest req,HttpServletResponse resp,Database database,MdmDataClean mdmDataClean) throws KettleDatabaseException, IOException {		try {			String sure =  req.getParameter("sure");			RowMetaInterface rm = new RowMeta();			ValueMeta idMeta = new ValueMeta("ID",ValueMeta.TYPE_INTEGER);			idMeta.setLength(9);			idMeta.setPrecision(0);			rm.addValueMeta(idMeta);						ValueMeta originalMeta = new ValueMeta("ORIGINAL_ID",ValueMeta.TYPE_INTEGER);			originalMeta.setLength(9);			originalMeta.setPrecision(0);			rm.addValueMeta(originalMeta);						ValueMeta original_value = new ValueMeta("ORIGINAL_VALUE",ValueMeta.TYPE_STRING);			original_value.setLength(255);			original_value.setPrecision(0);			rm.addValueMeta(original_value);						ValueMeta standardMeta = new ValueMeta("STANDARD_ID",ValueMeta.TYPE_INTEGER);			standardMeta.setLength(9);			standardMeta.setPrecision(0);			rm.addValueMeta(standardMeta);						ValueMeta standard_value = new ValueMeta("STANDARD_VALUE",ValueMeta.TYPE_STRING);			standard_value.setLength(255);			standard_value.setPrecision(0);			rm.addValueMeta(standard_value);						String tableName = mdmDataClean.getMaping_table_name();			if(mdmDataClean.getMaping_schema_name()!=null && !"".equals(mdmDataClean.getMaping_schema_name())){				tableName = mdmDataClean.getMaping_schema_name()+"."+tableName;			}			String sql = "";			if(!database.checkTableExists(tableName)){				sql = database.getCreateTableStatement(tableName, rm, null, true, "ID", false);			}else{				sql = database.getAlterTableStatement(tableName, rm, null, true, "ID", false);				if(sql!=null && !sql.isEmpty() && !"1".equals(sure)){					Map<String, String> map = new HashMap<String, String>();					map.put("msg", "保存失败!数据库"+tableName+"已存在.且表结构不一致,不能保存! 继续保存将执行SQL:"+sql);					map.put("status", "5001");					map.put("success", "false");					String jsonString = JsonHelper.encodeObject2Json(map);					write(jsonString, resp);					return false;				}else{					if(sure==null || !"1".equals(sure)){						Map<String, String> map = new HashMap<String, String>();						map.put("msg", "数据库表"+tableName+"已存在!<br>继续保存将会清空原数据,是否继续?");						map.put("status", "5001");						map.put("success", "false");						String jsonString = JsonHelper.encodeObject2Json(map);						write(jsonString, resp);						return false;					}				}			}			Result result = database.execStatements(sql);			createConstraint(database,mdmDataClean,"ORIGINAL_ID");			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}			}	private void createConstraint(Database database, MdmDataClean mdmDataClean,String c) {		try {			String rs = database.getDatabaseMeta().getDatabaseTypeDesc();			if("MYSQL".equals(rs)||"GREENPLUM".equals(rs)){												StringBuffer sql = new StringBuffer("ALTER TABLE ");				String key_name = "";				if(mdmDataClean.getMaping_schema_name()!=null && !"".equals(mdmDataClean.getMaping_schema_name())){					sql.append(mdmDataClean.getMaping_schema_name()).append(".");					key_name = mdmDataClean.getMaping_schema_name()+"_";				}				sql.append(mdmDataClean.getMaping_table_name()).append("  ADD CONSTRAINT  ");				sql.append(key_name).append(mdmDataClean.getMaping_table_name()).append("_original_id ");				sql.append(" FOREIGN KEY (").append(c).append(")  REFERENCES ");				if(mdmDataClean.getMdm_schema_name()!=null && !"".equals(mdmDataClean.getMdm_schema_name())){					sql.append(mdmDataClean.getMdm_schema_name()).append(".");				}				sql.append(mdmDataClean.getMdm_table_name()).append(" (").append(mdmDataClean.getMdm_primary_key()).append(") ON DELETE CASCADE");				Result result = database.execStatements(sql.toString());			}					} catch (Exception e) {			e.printStackTrace();		}	}	public ModelAndView update (HttpServletRequest req,HttpServletResponse resp,MdmDataClean mdmDataClean) throws IOException{			Database database = null;		try {			MdmMapingTable mapingTable = (MdmMapingTable) req.getSession().getAttribute(SESSION_MAPINGTABLE);			if(mapingTable ==null ){				this.setFailTipMsg("请先进行映射操作!", resp);				return null;			}			Dto dto = new BaseDto();			dto.put("id",mdmDataClean.getId());			MdmDataClean oldMdmDataClean = mdmDataCleanService.queryById(dto);			if(oldMdmDataClean!=null){				//同一个数据库				database = MarketUtil.getDatabase(mdmDataClean.getMaping_id_database());				database.connect();				if(createOrUpdateMapingTable(req,resp,database,mdmDataClean)){					database.truncateTable(mdmDataClean.getMaping_schema_name(), mdmDataClean.getMaping_table_name());					List<MdmMapingResult> list = mapingTable.getSuccesses();					String tableName = mdmDataClean.getMaping_table_name();					if(mdmDataClean.getMaping_schema_name()!=null && !"".equals(mdmDataClean.getMaping_schema_name())){						tableName = mdmDataClean.getMaping_schema_name()+"."+tableName;					}					insertMapingTable(tableName,list,database);					this.mdmDataCleanService.update(mdmDataClean);					req.getSession().setAttribute(SESSION_MAPINGTABLE, null);					this.setOkTipMsg("修改成功", resp);				}							}else{				this.setFailTipMsg("修改失败", resp);			}					} catch (Exception e) {			e.printStackTrace();			this.setFailTipMsg("修改失败", resp);		}finally{			if(database!=null){				database.disconnect();			}		}				return null;	}		public void insertMapingTable(String tableName,List<MdmMapingResult> list,Database database) throws KettleDatabaseException, SQLException {		String sql = "INSERT INTO " + tableName + "(ID,ORIGINAL_ID,ORIGINAL_VALUE,STANDARD_ID,STANDARD_VALUE) VALUES (?,?,?,?,?)" ;		PreparedStatement pst = database.getConnection().prepareStatement(sql);		database.getConnection().setAutoCommit(false);		for(int i=0;i<list.size();i++){			MdmMapingResult mapingResult = list.get(i);			pst.setInt(1, mapingResult.getId());			pst.setString(2, mapingResult.getOriginal_key());			pst.setString(3, mapingResult.getOriginal_name());			pst.setString(4, mapingResult.getStandard_key());			pst.setString(5, mapingResult.getStandard_name());			pst.execute();			if(i == 1000){				database.getConnection().commit();			}		}		database.getConnection().commit();	}		public ModelAndView getStandardName(HttpServletRequest req,HttpServletResponse resp) throws IOException{			Database database = null;		ResultSet resultSet = null;		try {			String id_model = req.getParameter("dataModel");			MdmModel mdmModel = getMdmModel(id_model,req,resp); //数据模型			String modelAttribute = req.getParameter("modelAttribute");//模式属性			String mdMkey = getPrimaryKey(mdmModel.getId_model());			MdmTable table = getMdmTable(mdmModel.getId_model());			if(table ==null){				setFailTipMsg("未找到数据模型主数据表,请先创建主数据表!", resp);				return null;			}			String sqlMdm = createMdmSQL(mdMkey,modelAttribute,table);			database = MarketUtil.getDatabase(table.getId_database());			database.connect();			resultSet = database.openQuery(sqlMdm);			List<TextValue> list = new ArrayList<TextValue>();			while (resultSet.next()) {				TextValue textValue = new TextValue();				textValue.setValue(resultSet.getString(mdMkey));				textValue.setText(resultSet.getString(modelAttribute));				list.add(textValue);			}			String jsonString = JsonHelper.encodeObject2Json(list);				write(jsonString, resp);					} catch (Exception e) {			e.printStackTrace();		}finally{			if(resultSet!=null){				try {					resultSet.close();				} catch (SQLException e) {					e.printStackTrace();				}			}			if(database!=null){				database.disconnect();			}		}				return null;	}			public ModelAndView query(HttpServletRequest req,HttpServletResponse resp) throws IOException{				Dto<String,Object> dto = new BaseDto();		try {			this.setPageParam(dto, req);			PaginationSupport<MdmTable> page = mdmDataCleanService.query(dto);			String jsonString = JsonHelper.encodeObject2Json(page);				write(jsonString, resp);		} catch (SQLException e) {			e.printStackTrace();		}		return null;	}			public ModelAndView delete(HttpServletRequest req,HttpServletResponse resp) throws IOException{		Database database = null;		try{			String idsStr = req.getParameter("ids");			String delTable = req.getParameter("delTable");			if("1".equals(delTable)){				String[] ids = idsStr.split(",");				for(String id:ids){					Dto dto = new BaseDto();					dto.put("ids",id);					dto.put("id",id);					MdmDataClean clean = mdmDataCleanService.queryById(dto);					database = MarketUtil.getDatabase(clean.getMaping_id_database());					database.connect();					if(database.checkTableExists(clean.getMaping_table_name())){						StringBuffer sql = new StringBuffer("DROP TABLE ");						if(clean.getMaping_schema_name()!=null && !"".equals(clean.getMaping_schema_name())){							sql.append(clean.getMaping_schema_name()).append(".");						}						sql.append(clean.getMaping_table_name());						database.execStatement(sql.toString());					}					mdmDataCleanService.delete(dto);					this.setOkTipMsg("删除成功", resp);				}			}else if("0".equals(delTable)){				Dto dto = new BaseDto();				dto.put("ids",idsStr);				this.mdmDataCleanService.delete(dto);				this.setOkTipMsg("删除成功", resp);			}								}catch(Exception e){			e.printStackTrace();			this.setOkTipMsg("删除失败", resp);		}finally{			if(database!=null){				database.disconnect();			}		}		return null;	}		public ModelAndView getMdmModelAttribute(HttpServletRequest req,HttpServletResponse resp) throws IOException{			try {			String id_model = req.getParameter("id_model");			List<TextValue> list = new ArrayList<TextValue>();			Dto<String,Object> dto = new BaseDto();			dto.put("id_model", id_model);			List<MdmModelAttribute>  ls = mdmModelAttributeService.query4ComboBox(dto);			for(MdmModelAttribute vm:ls){				TextValue textValue = new TextValue();				textValue.setText(vm.getAttribute_name());				textValue.setValue(vm.getField_name());				list.add(textValue);			}			if(list.size() == 0){				TextValue textValue = new TextValue();				textValue.setText("");				textValue.setValue("");				list.add(textValue);			}			String jsonString = JsonHelper.encodeObject2Json(list);				write(jsonString, resp);		} catch (Exception e) {			e.printStackTrace();		}				return null;	}					/**	 * 数据模型和主数据映射方法.	 * @param req	 * @param resp	 * @return	 * @throws IOException 	 */	public ModelAndView startMaping(HttpServletRequest req,HttpServletResponse resp) throws IOException{		try {			String id_model = req.getParameter("dataModel");			MdmModel mdmModel = getMdmModel(id_model,req,resp); //数据模型			if(mdmModel!=null){				String modelAttribute = req.getParameter("modelAttribute");//模式属性								String dataSourceId = req.getParameter("dataSource");//数据源id				String schemaName = req.getParameter("schemaName");//模式名称				String tableName = req.getParameter("tableName");//表名				String primaryKey = req.getParameter("primaryKey");//主键字段				String primaryName = req.getParameter("primaryName");//名称字段				String whereCondition = req.getParameter("whereCondition");//过滤条件				String mapingMode = req.getParameter("mapingMode");//映射方式				//主数据表				MdmTable table = getMdmTable(mdmModel.getId_model());				if(table!=null){					//主数据表查询sql					String mdMkey = getPrimaryKey(mdmModel.getId_model());					String sqlMdm = createMdmSQL(mdMkey,modelAttribute,table);					String sqlMaping = createMapingSQL(schemaName,tableName,primaryKey,primaryName,whereCondition);					String[] cmd = new String[7];					cmd[0] = table.getId_database()+"";//数据模型 database id					cmd[1] = modelAttribute; //模式查询字段					cmd[2] = sqlMdm;//模式查询sql					cmd[3] = dataSourceId;//映射数据库id					cmd[4] = primaryName;//映射字段名称					cmd[5] = sqlMaping;//映射表查询sql					cmd[6] = mdMkey;//映射表查询sql					MdmMapingTable mapingTable = new MdmMapingTable();															mapingTable.setOriginal_key(primaryKey);					mapingTable.setOriginal_name(primaryName);					mapingTable.setStandard_key(mdMkey);					mapingTable.setStandard_name(modelAttribute);										//WebserviceTaskRun taskRun = new WebserviceTaskRun("/Template/TemplateMdm", "trans");//通过元数据注入					WebserviceTaskRun taskRun = new WebserviceTaskRun("/Template/TemplateMdm", "template");//直接调用转换					List<RowMetaAndData> list = taskRun.runTransTask(cmd, "admin", "admin");					int id = 1;					for(RowMetaAndData metaAndData : list){						MdmMapingResult mapingResult = new MdmMapingResult();						mapingResult.setId(id);						mapingResult.setOriginal_key(metaAndData.getString(0, ""));						mapingResult.setOriginal_name(metaAndData.getString(1, ""));						mapingResult.setStandard_key(metaAndData.getString(4, ""));						mapingResult.setStandard_name(metaAndData.getString(2, ""));						mapingResult.setFalg(metaAndData.getInteger(5));						if(mapingResult.getFalg() == 1){							mapingTable.getSuccesses().add(mapingResult);//映射成功						}else{							mapingTable.getFailures().add(mapingResult);//映射失败						}						id++;					}					req.getSession().setAttribute(SESSION_MAPINGTABLE, mapingTable);					this.setOkTipMsg("", resp);				}else{					setFailTipMsg("未找到数据模型主数据表,请先创建主数据表!", resp);					return null;				}			}		} catch (Exception e) {			e.printStackTrace();			this.setFailTipMsg("映射失败", resp);		}				return null;					}		/**	 * 修改映射结果	 * @param req	 * @param resp	 * @return	 * @throws IOException	 */	public ModelAndView updateDataMaping(HttpServletRequest req,HttpServletResponse resp) throws IOException{		try {			String falg = req.getParameter("falg");//成功失败标志			String id = req.getParameter("id");//id			String standard_key = req.getParameter("standard_key");//标准主键			String standard_name = req.getParameter("standard_name");//标准值			MdmMapingTable mapingTable = (MdmMapingTable) req.getSession().getAttribute(SESSION_MAPINGTABLE);			List<MdmMapingResult> rows = null;			if("1".equals(falg)){				rows = mapingTable.getSuccesses();				for(MdmMapingResult mapingResult:rows){					if((mapingResult.getId()+"").equals(id)){						mapingResult.setStandard_key(standard_key);						mapingResult.setStandard_name(standard_name);						break;					}				}							}else if("0".equals(falg)){				rows = mapingTable.getFailures();				for(int i =0 ;i<rows.size();i++ ){					MdmMapingResult mapingResult = rows.get(i);					if((mapingResult.getId()+"").equals(id)){						mapingResult.setStandard_key(standard_key);						mapingResult.setStandard_name(standard_name);						mapingTable.getSuccesses().add(mapingResult);						rows.remove(i);						break;					}				}							}			this.setOkTipMsg("", resp);					} catch (Exception e) {			e.printStackTrace();			this.setFailTipMsg("修改失败", resp);		}				return null;	}		/**	 * 获取映射结果	 * @param req	 * @param resp	 * @return	 * @throws IOException	 */	public ModelAndView getMapingResults(HttpServletRequest req,HttpServletResponse resp) throws IOException{		Database database = null;		Database databaseOriginal = null;		Database databaseStandard = null;		ResultSet resultSet = null;		try {			String falg = req.getParameter("falg");//成功失败标志			MdmMapingTable mapingTable = (MdmMapingTable) req.getSession().getAttribute(SESSION_MAPINGTABLE);			List<MdmMapingResult> rows = null;			if("1".equals(falg)){				rows = mapingTable.getSuccesses();			}else if("0".equals(falg)){				rows = mapingTable.getFailures();			}else if("3".equals(falg)){				rows = new ArrayList<MdmMapingResult>();				String id = req.getParameter("id");				Dto dto = new BaseDto();				dto.put("id",id);				MdmDataClean mdmDataClean = mdmDataCleanService.queryById(dto);				if(mdmDataClean!=null){					mapingTable = new MdmMapingTable();					mapingTable.setId_model(mdmDataClean.getId_model());					mapingTable.setAttribute_model(mdmDataClean.getAttribute_model());//模型属性					mapingTable.setMdm_id_database(mdmDataClean.getMaping_id_database());//主数据表-数据源id					mapingTable.setMdm_schema_name(mdmDataClean.getMdm_schema_name());//主数据表-模式名					mapingTable.setMdm_table_name(mdmDataClean.getMdm_table_name());//主数据表-表名					mapingTable.setMdm_primary_key(mdmDataClean.getMdm_primary_key());//主数据表-主键字段					mapingTable.setMdm_column_name(mdmDataClean.getMdm_column_name()) ;//主数据表-名称字段										database = MarketUtil.getDatabase(mdmDataClean.getMaping_id_database());					database.connect();					String tableName = mdmDataClean.getMaping_table_name();					if(mdmDataClean.getMaping_schema_name()!=null && !"".equals(mdmDataClean.getMaping_schema_name())){						tableName = mdmDataClean.getMaping_schema_name()+"."+tableName;					}					String sql = "SELECT * FROM " +tableName;					resultSet = database.openQuery(sql);					databaseOriginal = MarketUtil.getDatabase(mdmDataClean.getMdm_id_database());					databaseOriginal.connect();					MdmTable mdmTable = getMdmTable(mdmDataClean.getId_model());					databaseStandard = MarketUtil.getDatabase(mdmTable.getId_database());					databaseStandard.connect();					while (resultSet.next()) {						int map_id = resultSet.getInt("ID");						int original_id =  resultSet.getInt("ORIGINAL_ID");						int standard_id = resultSet.getInt("STANDARD_ID") ;						String  original_val = getOriginalVal(databaseOriginal,mdmDataClean,original_id);						String  standard_Val = getStandardVal(databaseStandard,mdmDataClean,standard_id);																		MdmMapingResult mapingResult = new MdmMapingResult();						mapingResult.setId(map_id);						mapingResult.setOriginal_key(original_id+"");						mapingResult.setOriginal_name(original_val);						mapingResult.setStandard_key(standard_id+"");						mapingResult.setStandard_name(standard_Val);						rows.add(mapingResult);					}									}				mapingTable.setSuccesses(rows);				req.getSession().setAttribute(SESSION_MAPINGTABLE	, mapingTable);			}			int total = 0;			if(rows != null){				total = rows.size();			}			Map<String, Object> map = new HashMap<String, Object>();			map.put("rows", rows);			map.put("total", total);			String jsonString = JsonHelper.encodeObject2Json(map);				write(jsonString, resp);		} catch (Exception e) {			e.printStackTrace();			this.setFailTipMsg("获取失败", resp);		}finally{			if(resultSet!=null){				try {					resultSet.close();				} catch (SQLException e) {					e.printStackTrace();				}			}			if(databaseOriginal!=null){				databaseOriginal.disconnect();			}			if(databaseStandard!=null){				databaseStandard.disconnect();			}			if(database!=null){				database.disconnect();			}		}		return null;	}		private String getStandardVal(Database database,MdmDataClean mdmDataClean, int standard_id) throws IOException, KettleDatabaseException {		String val = "";		ResultSet resultSet = null;		try {			MdmTable mdmTable = getMdmTable(mdmDataClean.getId_model());			if(mdmTable!=null){								String tableName_standard = mdmTable.getTable_name();				if(mdmTable.getSchema_name()!=null && !"".equals(mdmTable.getSchema_name())){					tableName_standard = mdmTable.getSchema_name()+"."+tableName_standard;				}				String primaryKey = getPrimaryKey(mdmTable.getId_model());								String sql_standard =  "SELECT "+mdmDataClean.getAttribute_model()+" FROM " + tableName_standard +" WHERE " +primaryKey +" = '"+standard_id+"'";				resultSet  = database.openQuery(sql_standard);								if(resultSet.next()) { 					val = resultSet.getString(mdmDataClean.getAttribute_model());				}			}					} catch (SQLException e) {				e.printStackTrace();		}finally {			if(resultSet!=null){				try {					resultSet.close();				} catch (SQLException e) {					e.printStackTrace();				}			}		}		return val;	}	private String getOriginalVal(Database database, MdmDataClean mdmDataClean,int original_id) throws KettleDatabaseException {		String val = "";		ResultSet resultSet = null;		try {		//原值			String tableName_original = mdmDataClean.getMdm_table_name();			if(mdmDataClean.getMdm_schema_name()!=null && !"".equals(mdmDataClean.getMdm_schema_name())){				tableName_original = mdmDataClean.getMdm_schema_name()+"."+tableName_original;			}			String sql_original = "SELECT "+mdmDataClean.getMdm_column_name()+" FROM " + tableName_original +" WHERE " + mdmDataClean.getMdm_primary_key() +" = '"+original_id+"'";			resultSet = database.openQuery(sql_original);			if(resultSet.next()) { 				val = resultSet.getString(mdmDataClean.getMdm_column_name());			}		} catch (SQLException e) {			e.printStackTrace();		}finally {			if(resultSet!=null){				try {					resultSet.close();				} catch (SQLException e) {					e.printStackTrace();				}			}		}		return val;	}	private String createMapingSQL(String schemaName, String tableName, String primaryKey, String primaryName,			String whereCondition) {				StringBuffer sql = new StringBuffer("select ");		sql.append(primaryKey).append(" , ").append(primaryName).append(" from ");		//sql.append(" * ").append(" from ");		if(null!=schemaName && !"".equals(schemaName) ){			sql.append(schemaName).append(".");		}		sql.append(tableName);		if(null !=whereCondition && !"".equals(whereCondition)){			sql.append(" where ").append(whereCondition);		}				return sql.toString();	}		private MdmTable getMdmTable(Integer id_model) throws IOException{		Dto<String,Object> dto = new BaseDto();		dto.put("id_model", id_model);		List<MdmTable> tables = mdmTableService.queryByMdmModel(dto);		if(tables != null && !tables.isEmpty()){			MdmTable table = tables.get(0);//数据模型表信息			return table;		}		return null;			}		/**	 * 	 * @param	 * @param modelAttribute 模型属性	 * @return	 * @throws IOException 	 * @throws SQLException 	 */	private String createMdmSQL(String mdMkey,String modelAttribute, MdmTable table) throws IOException, SQLException {				StringBuffer sql = new StringBuffer("select ");		sql.append(mdMkey).append(" , ").append(modelAttribute).append(" from ");		//sql.append(" * ").append(" from ");		if(null!=table.getSchema_name() && !"".equals(table.getSchema_name()) ){			sql.append(table.getSchema_name()).append(".");		}		sql.append(table.getTable_name());		return sql.toString();	}		private String getPrimaryKey(Integer id_model) throws SQLException{		Dto<String,Object> dto = new BaseDto();		dto.put("id_model", id_model);		String primary_key = "";		List<MdmModelAttribute> attributes = mdmModelAttributeService.query4ComboBox(dto);		for(MdmModelAttribute attribute:attributes){			if("Y".equals(attribute.getIs_primary())){				primary_key = attribute.getField_name();				break;			}		}				return primary_key;	}	private MdmModel getMdmModel(String id_model,HttpServletRequest req,HttpServletResponse resp) throws IOException {		if(id_model==null || id_model.isEmpty()){			setFailTipMsg("数据模型不能为空!", resp);			return null;		}		Dto<String,Object> dto = new BaseDto();		dto.put("id_model", id_model);		MdmModel mdmModel =  this.mdmModelService.queryById(dto);		if(mdmModel ==null){			setFailTipMsg("未找到数据模型,请检查数据模型是否存在!", resp);		}		return mdmModel;	}	}